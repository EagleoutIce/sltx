#!/usr/bin/env python3

# Simple LaTeX INSTaller
# sltxinst

# TODO: setup other projects with this
# TODO: check versioning
# TODO: do not install if already done
# TODO: symlink options?

import os  # list directory
import shutil  # clean working dir
import sys  # cmd line args

from sltx_globals import DEFAULT_CONFIG, C_DRIVER_LOG, C_TEX_HOME, C_WORKING_DIR, C_CREATE_DIRS, C_CLEANUP, C_AUTODETECT_DRIVERS, C_DRIVERS, C_DRIVER_PATTERNS
import sltx_globals as sg

from sltx_config import write_to_log, load_configuration, load_dependencies_config, assure_dirs
from sltx_dep import install_dependency

import argparse

if __name__ == "__main__":
    if os.path.isfile(DEFAULT_CONFIG):
        print("Automatically loading '{DEFAULT_CONFIG}'".format(**locals()))
        load_configuration(DEFAULT_CONFIG)

    if len(sys.argv) == 2:  # 1 arg given
        load_dependencies_config(sys.argv[1])
    elif len(sys.argv) == 3:  # 2 arg given
        load_configuration(sys.argv[1])
        load_dependencies_config(sys.argv[2])
    else:
        print("Usage: {prg} [config.yml] dep.yml".format(prg=sys.argv[0]))
        sys.exit(1)

    assure_dirs()
    print("Loaded dependencies:", sg.dependencies)

    if "target" not in sg.dependencies or "dependencies" not in sg.dependencies:
        print("The dependency-file must supply a 'target' and an 'dependencies' key!")
        sys.exit(1)

    write_to_log("====Dependencies for:" + sg.dependencies["target"]+"\n")
    print("Dependencies for:", sg.dependencies["target"])
    print("Installing to:", sg.configuration[C_TEX_HOME])
    for dep in sg.dependencies["dependencies"]:
        install_dependency(dep)

    # all installed
    if sg.configuration[C_CLEANUP]:
        print("> Cleaning up the working directory, as set.")
        shutil.rmtree(sg.configuration[C_WORKING_DIR])
    print("Dependency installation for",
          sg.dependencies["target"], "completed. WARNING: NO RECURSION FOR NOW")
