#!/usr/bin/env python3

# Simple LaTeX INSTaller
# sltxinst

# TODO: setup other projects with this
# TODO: check versioning
# TODO: do not install if already done
# TODO: symlink options?

import os  # list directory
import shutil  # clean working dir
import sys  # cmd line args
from concurrent import futures

from sltx_globals import DEFAULT_CONFIG, C_DRIVER_LOG, C_TEX_HOME, C_WORKING_DIR, C_CREATE_DIRS, C_CLEANUP, C_AUTODETECT_DRIVERS, C_DRIVERS, C_DRIVER_PATTERNS
import sltx_globals as sg

from sltx_config import write_to_log, load_configuration, load_dependencies_config, assure_dirs
from sltx_dep import install_dependency

import argparse
import pathlib

def valid_file(arg : str):
    if arg is None or arg.strip() == "":
        raise ValueError("arg vas none or empty")
    if not os.path.isfile(arg):
        raise FileNotFoundError("\"" + arg + "\" must be an existing file")

    return arg

parser = argparse.ArgumentParser(
    description="sltxinst, a Simple LaTeX-INSTaller")
parser.add_argument('config',metavar='config.yml', nargs='?', type=valid_file,
                    help="The file to load the configuration from.")
parser.add_argument('dep',metavar='dep.yml', nargs=1, type=valid_file,
                    help="The file to load the dependencies from.")

args = parser.parse_args()

if os.path.isfile(DEFAULT_CONFIG):
    print("Automatically loading '{DEFAULT_CONFIG}'".format(**locals()))
    load_configuration(DEFAULT_CONFIG)


if args.config is not None:
    load_configuration(args.config)
load_dependencies_config(args.dep[0])

assure_dirs()

if "target" not in sg.dependencies or "dependencies" not in sg.dependencies:
    print("The dependency-file must supply a 'target' and an 'dependencies' key!")
    sys.exit(1)

write_to_log("====Dependencies for:" + sg.dependencies["target"]+"\n")
print()
print("Dependencies for:", sg.dependencies["target"])
print("Installing to:", sg.configuration[C_TEX_HOME])
print()

# TODO: multithreading
with futures.ThreadPoolExecutor(max_workers=1) as pool:
    for i, dep in enumerate(sg.dependencies["dependencies"]):
        pool.submit(install_dependency, dep, i)

# all installed
if sg.configuration[C_CLEANUP]:
    print("> Cleaning up the working directory, as set.")
    shutil.rmtree(sg.configuration[C_WORKING_DIR])
print("Dependency installation for",
      sg.dependencies["target"], "completed. WARNING: NO RECURSION FOR NOW")
