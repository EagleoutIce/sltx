#!/usr/bin/env python3

# Simple LaTeX INSTaller
# sltxinst

# TODO: check versioning
# TODO: do not install if already done
# TODO: symlink options?

import glob  # glob :P
import os  # list directory
import re  # matching files
import shutil  # clean working dir
import subprocess  # execution
import sys  # cmd line args
import zipfile  # extracting zips

import yaml  # Parse config file

DEFAULT_CONFIG = "./sltx-config.yml"

configuration = {
    "tex_home": "~/texmf/tex/latex/sltxinst",
    "working_dir": "~/.sltxinst",
    "driver_log": "sltx-drivers.log",
    "create_dirs": True,
    "cleanup": True,  # TODO: implement; TODO: only grab interesting files if not already there
    # "recursive": True, TODO: recursive
    "autodetect_drivers": True,
    # TODO maybe specific install routine instead of plain copy
    "drivers": {
        "git": {
            "command": "git clone --depth 1 {args} \"{url}\" \"{working_dir}/{dep_name}\"",
            "target-dir": "{working_dir}/{dep_name}",
            "needs-delete": True  # if already exists
            # TODO: maybe update routine?
        }
        # TODO: other
    },
    "driver-patterns": {
        "git": ["github", "gitlab"]
    }
}

dependencies = {}
loaded = []

def write_to_log(data : str):
    if configuration["driver_log"].strip():
        with open(configuration["driver_log"], 'ab') as f:
            f.write(data)

def load_configuration(file: str):
    global configuration
    with open(file, 'r') as yaml_file:
        # FullLoader only available for 5.1 and above:
        if float(yaml.__version__[:yaml.__version__.rfind(".")]) >= 5.1:
            y_conf = yaml.load(yaml_file, Loader=yaml.FullLoader)
        else:
            y_conf = yaml.load(yaml_file)
        configuration = {**configuration, **y_conf}


def load_dependencies_config(file: str):
    global dependencies
    with open(file, 'r') as yaml_file:
        # FullLoader only available for 5.1 and above:
        if float(yaml.__version__[:yaml.__version__.rfind(".")]) >= 5.1:
            y_dep = yaml.load(yaml_file, Loader=yaml.FullLoader)
        else:
            y_dep = yaml.load(yaml_file)
        dependencies = {**dependencies, **y_dep}


def assure_dirs():
    target_path: str = os.path.expanduser(configuration["tex_home"])
    create: bool = configuration["create_dirs"]
    if not os.path.isdir(target_path):
        if create:
            print("> Tex-Home-Dir", target_path, "not found. Creating...")
            os.mkdir(target_path)
        else:
            print("! Not allowed to create texhome. Exit")
            sys.exit(1)
    configuration["tex_home"] = target_path  # expansion
    target_path: str = os.path.expanduser(configuration["working_dir"])
    if not os.path.isdir(target_path):
        if create:
            print("> Working-Dir", target_path, "not found. Creating...")
            os.mkdir(target_path)
        else:
            print("! Not allowed to create working-dir. Exit")
            sys.exit(1)
    configuration["working_dir"] = target_path  # expansion


def detect_driver(url: str):
    print(" - Autodetecting driver...")
    for key, patterns in configuration["driver-patterns"].items():
        for pattern in patterns:
            if re.search(pattern, url):
                return key
    print(" ! No driver found...")
    sys.exit(1)


def grab_files_from(path: str, data: dict):
    print(" - Grabby-Grab-Grab files from \"" + path + "\"...")
    if "grab-files" not in data:
        print(" ! Key 'grab-files' not found. Won't grab any files")
        return False

    files = []
    for grab_pattern in data["grab-files"]:
        ## maybe forbid level up?
        files.extend(glob.glob(os.path.join(path,grab_pattern), recursive=True))

    # extra so i can setup installer afterwards more easily
    print(" > Grabbing the follwing files for installation:", [os.path.basename(f) for f in files])
    for file in files:
        shutil.copy2(file, configuration["tex_home"])
    return True

def grab_dirs_from(path: str, data: dict):
    print(" - Grabby-Grab-Grab dirs from \"" + path + "\"...")
    if "grab-dirs" not in data:
        print(" ! Key 'grab-dirs' not found. Won't grab any directories")
        return False

    dirs = []
    for grab_pattern in data["grab-dirs"]:
        ## maybe forbid level up?
        dirs.extend(glob.glob(os.path.join(path,grab_pattern), recursive=True))

    # extra so i can setup installer afterwards more easily
    print(" > Grabbing the follwing dirs for installation:", [os.path.basename(f) for f in files])
    for dir in dirs:
        ## if fails rethrow :D
        shutil.copytree(dir, configuration["tex_home"])

    return True

def use_driver(data: dict, dep_name: str, driver: str, url: str):
    # default no arguments
    if "args" not in data:
        data["args"] = ""
    driver_data = configuration["drivers"][driver]
    command: str = driver_data["command"].format(
        **data, **configuration, dep_name=dep_name)
    target_dir: str = driver_data["target-dir"].format(
        **data, **configuration, dep_name=dep_name)
    if os.path.isdir(target_dir) and driver_data["needs-delete"]:
        print(" - Target folder", target_dir,
              "exists. Will be deleted as the driver needs this")
        shutil.rmtree(target_dir)
    print(" > Executing:", command)
    feedback = subprocess.run(command, capture_output=True, shell=True)
    write_to_log(feedback.stdout)
    write_to_log(feedback.stderr)
    if feedback.returncode != 0:
        print(" ! Driver failed with code", feedback, "exiting.")
        sys.exit(feedback.returncode)

    if not grab_files_from(target_dir, data) and not grab_dirs_from(target_dir, data):
        print(" ! No grabs performed!")
        write_to_log(("No grabs performed for: " + dep_name).encode('utf-8'))
    # TODO: grab dirs
    # TODO: error if not files and not dir


def install_dependency(name: str):
    if name in loaded:
        print("Skipping", name, " as it was already loaded by another dep.")
        return
    data = dependencies["dependencies"][name]
    print("Loading \"" + name + "\"")
    if "url" not in data:
        print(" ! The dependency did not have an url-tag attached")
    url: str = data["url"]
    print(" - Loading from: \"" + url + "\"")
    if "driver" not in data:
        if not configuration["autodetect_drivers"]:
            print(" ! No driver given and autodetection disabled!")
        else:
            data["driver"] = detect_driver(url)
    driver: str = data["driver"]
    print(" - Using driver: \"" + driver + "\"")

    if driver not in configuration["drivers"]:
        print(" ! The selected driver is unknown. Loaded:",
              configuration["drivers"])
        sys.exit(2)
    use_driver(data, name, driver, url)


if __name__ == "__main__":
    if os.path.isfile(DEFAULT_CONFIG):  # maybe allow 'yaml' too?
        print("Automatically loading '{DEFAULT_CONFIG}'".format(**locals()))
        load_configuration(DEFAULT_CONFIG)

    if len(sys.argv) == 2:  # 1 arg given
        load_dependencies_config(sys.argv[1])
    elif len(sys.argv) == 3:  # 2 arg given
        load_configuration(sys.argv[1])
        load_dependencies_config(sys.argv[2])
    else:
        print("Usage: {prg} [config.yml] dep.yml".format(prg=sys.argv[0]))
        sys.exit(1)

    assure_dirs()

    if "target" not in dependencies or "dependencies" not in dependencies:
        print("The dependency-file must supply a 'target' and an 'dependencies' key!")
        sys.exit(1)

    write_to_log(("====Dependencies for:" + dependencies["target"]).encode('utf-8'))
    print("Dependencies for:", dependencies["target"])
    print("Installing to:", configuration["tex_home"])
    for dep in dependencies["dependencies"]:
        install_dependency(dep)
    
    # all installed
    if configuration["cleanup"]:
        print("> Cleaning up the working directory, as set.")
        shutil.rmtree(configuration["working_dir"])
    print("Dependency installation for",dependencies["target"],"completed. WARNING: NO RECURSION FOR NOW")